#include "sensing.h"
#include "simpletools.h"
#include "abdrive.h"
#include "ping.h"

#define SQUARE_LENGTH 400
#define SENSOR_VALUE 14
#define MULTIPLIER 2
#define IR_LEFT 10
#define IR_RIGHT 10
#define BASE_SPEED_TICKS 64
#define ROBOT_WIDTH 105.8

int irLeft, irRight;

void blink() {
  int i;
  for(i = 0; i < 3; i++)
  {
    high(26);                                
    pause(500);                               
    low(26);                                  
    pause(500);
  }    
  pause(1000);
}

void setSpeed(int speed)
{
  drive_speed(speed,speed);
}

void turn(int direction)
{
  if (direction == -1)
  {
    drive_goto(-25,26);
  }
  else if (direction == 1)
  {
    drive_goto(26,-25);
  }
  else if (direction == 2)
  {
    drive_goto(51,-51);
  }
}

int getIR()
{
    irLeft = 0;
    irRight = 0;
    for (int dacVal = 0; dacVal < 160; dacVal += 8) {
        dac_ctr(26, 0, dacVal);
        freqout(11, 1, 38000);
        irLeft += input(10);

        dac_ctr(27, 1, dacVal);
        freqout(1, 1, 38000);
        irRight += input(2);
    }
}

void moveForwardSquare()
{
  double X = 0;
  double Y = 0;
  double angle = 0;
  double distanceTravelled = 0;

  int prevTicksLeft = 0;
  int prevTicksRight = 0;

  drive_getTicks(&prevTicksLeft, &prevTicksRight);
  while(distanceTravelled < SQUARE_LENGTH) {
      getIR();
      print("IR Left: %d, IR Right: %d\n", irLeft, irRight);
      int changeVal;
      if(irLeft < SENSOR_VALUE && irRight < SENSOR_VALUE){
          changeVal = (irLeft - irRight) * MULTIPLIER;
      } else if ( irLeft < SENSOR_VALUE ) {
          changeVal = (irLeft - IR_LEFT) * MULTIPLIER;
      } else if ( irRight < SENSOR_VALUE ) {
          changeVal = (IR_RIGHT - irRight) * MULTIPLIER;
      } else {
          changeVal = 0;
      }

      drive_speed(BASE_SPEED_TICKS - changeVal, BASE_SPEED_TICKS + changeVal);
      
      int ticksLeft, ticksRight;
      drive_getTicks(&ticksLeft,  &ticksRight);

      double dRight = (ticksRight - prevTicksRight) * 3.25;
      double dLeft = (ticksLeft - prevTicksLeft) * 3.25;
      double dCentre = (dRight + dLeft) / 2;

      angle = angle + (dRight - dLeft) / ROBOT_WIDTH;

      X = X + dCentre * cos(angle);
      Y = Y + dCentre * sin(angle);

      distanceTravelled = sqrt(X*X + Y*Y);

      prevTicksLeft = ticksLeft;
      prevTicksRight = ticksRight;
  }
  drive_speed(0,0);
}

void correct() {
  if(ping_cm(8) < 14) {
    while(ping_cm(8) < 14) {
      drive_speed(-10,-10);
      pause(10);
    }
  } else {
    while(ping_cm(8) > 14) {
      drive_speed(10,10);
      pause(10);
    }
  }
  drive_speed(0,0);   
}

int frontChecker()
{
  int result;
  int distance = ping_cm(8);
  if (distance < 35)
  {
    correct();          
    return 1;
  }
  else
  {
    return 0;
  }
}

int rightChecker()
{
    turn(1);
    int val = frontChecker();
    turn(-1);
    return val;
}

int leftChecker()
{
    turn(-1);
    int val = frontChecker();
    turn(1);
    return val;
}

int leftChecker1() {
  rotateRobot(-1);
  return frontChecker();
}

int frontChecker1() {
  rotateRobot(1);
  return frontChecker();
}   

int rightChecker1() {
  rotateRobot(1);
  return frontChecker();
}  

  